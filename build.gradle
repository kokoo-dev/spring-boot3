buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.1'
	id 'io.spring.dependency-management' version '1.1.4'
//	id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10'
}

group = 'com.kokoo'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2023.0.0")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// web
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// lombok
	implementation 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// actuator
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	// spring bootstrap
	implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'

	// spring cloud config
	implementation 'org.springframework.cloud:spring-cloud-starter-config'

	// spring cloud sleuth -> micrometer-tracing
	implementation 'io.micrometer:micrometer-tracing-bridge-brave'

	// spring cloud feign
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

	// open feign & micrometer
	implementation 'io.github.openfeign:feign-micrometer'

	// spring cloud zookeeper
	implementation 'org.springframework.cloud:spring-cloud-starter-zookeeper-discovery'

	// doc
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

	// jpa
	implementation 'com.h2database:h2'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// querydsl
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"
	annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}:jakarta"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

def querydslDir = "$buildDir/generated/querydsl"

sourceSets {
	main.java.srcDirs += [ querydslDir ]
}

tasks.withType(JavaCompile) {
	options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
}

clean.doLast {
	file(querydslDir).deleteDir()
}